name: sonarcloud analysis

on:
  workflow_call:
    inputs:
      pull-request:
        required: true
        type: boolean
      pull-request-base:
        required: false
        type: string
      pull-request-head:
        required: false
        type: string
      branch-name:
        required: false
        type: string
    secrets:
      sonar-token:
        required: true

jobs:
  sonar:
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: setup dotnet
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 6.0.x

      - name: setup java
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: 18

      - name: cache sonarcloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: cache sonarcloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: install sonarcloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

      - name: begin sonarcloud scan for pull request
        if: ${{ inputs.pull-request == true }}
        env:
          PR_NUMBER: ${{ inputs.pull-request-number }}
          PR_BASE: ${{ inputs.pull-request-base }}
          PR_HEAD: ${{ inputs.pull-request-head }}
          SONAR_TOKEN: ${{ secrets.sonar-token }}
        run: |
          ./.sonar/scanner/dotnet-sonarscanner begin \
          /k:"lgcmotta_dotnet-design-patterns" \
          /o:"lgcmotta" \
          /d:sonar.pullrequest.key="$PR_NUMBER" \
          /d:sonar.pullrequest.base="$PR_BASE" \
          /d:sonar.pullrequest.branch="$PR_HEAD" \
          /d:sonar.login="$SONAR_TOKEN" \
          /d:sonar.host.url="https://sonarcloud.io" \
          /d:sonar.qualitygate.wait=true \
          /d:sonar.cs.opencover.reportsPaths="./tests/**/results/*.opencover.xml"

      - name: begin sonarcloud scan
        if: ${{ inputs.pull-request == false }}
        env:
          SONAR_TOKEN: ${{ secrets.sonar-token }}
          BRANCH_NAME: ${{ inputs.branch-name }}
        run: |
          ./.sonar/scanner/dotnet-sonarscanner begin \
          /k:"lgcmotta_dotnet-design-patterns" \
          /o:"lgcmotta" \
          /d:sonar.branch.name="$BRANCH_NAME" \
          /d:sonar.login="$SONAR_TOKEN" \
          /d:sonar.host.url="https://sonarcloud.io" \
          /d:sonar.cs.opencover.reportsPaths="./tests/**/results/*.opencover.xml"

      - name: run tests
        run: |
          dotnet test \
          /p:CoverletOutput=./results/ \
          /p:CollectCoverage=true \
          /p:ExcludeByAttribute="CompilerGeneratedAttribute" \
          /p:CoverletOutputFormat=opencover \
          --logger "GitHubActions;report-warnings=false"

      - name: end sonarcloud scan
        env:
          SONAR_TOKEN: ${{ secrets.sonar-token }}
        run: ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="$SONAR_TOKEN"
